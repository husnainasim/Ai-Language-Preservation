generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  clerkUserId        String           @unique
  email              String           @unique
  name               String?
  imageUrl           String?
  role               Role
  bio                String?
  nativeLanguage     String?          @unique
  /// one-to-one: each user’s nativeLanguage maps to exactly one LanguageInsight
  languageInsight    LanguageInsight? @relation(name: "UserNativeInsight", fields: [nativeLanguage], references: [languageId])
  preferredLanguages String[]
  learningGoals      String?
  timeZone           String?
  availability       Json?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  uploadedAudioSamples      AudioSample[]     @relation("UploaderAudioSamples")
  communityMatchesAsMatched CommunityMatch[]  @relation("CommunityMatchesAsMatched")
  communityMatches          CommunityMatch[]  @relation("CommunityMatches")
  uploadedGrammarRules      GrammarRule[]     @relation("UploaderGrammarRules")
  progressRecords           UserProgress[]
  uploadedWordLists         WordList[]        @relation("UploaderWordLists")
}

model Language {
  id                String                   @id @default(uuid())
  name              String
  description       String?
  region            String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  audioSamples      AudioSample[]
  grammarRules      GrammarRule[]
  languageInsights  LanguageInsight[]
  retentionForecast LanguageRetentionForecast?
  lessons           Lesson[]
  wordLists         WordList[]
}

model WordList {
  id           String   @id @default(uuid())
  languageId   String
  words        Json
  uploadedById String
  createdAt    DateTime @default(now())
  language     Language @relation(fields: [languageId], references: [id])
  uploadedBy   User     @relation("UploaderWordLists", fields: [uploadedById], references: [id])
}

model GrammarRule {
  id           String   @id @default(uuid())
  languageId   String
  rule         String
  examples     Json?
  uploadedById String
  createdAt    DateTime @default(now())
  language     Language @relation(fields: [languageId], references: [id])
  uploadedBy   User     @relation("UploaderGrammarRules", fields: [uploadedById], references: [id])
}

model AudioSample {
  id            String   @id @default(uuid())
  languageId    String
  url           String
  transcription String?
  uploadedById  String
  createdAt     DateTime @default(now())
  language      Language @relation(fields: [languageId], references: [id])
  uploadedBy    User     @relation("UploaderAudioSamples", fields: [uploadedById], references: [id])
}

model Lesson {
  id              String         @id @default(uuid())
  languageId      String
  title           String
  content         String
  lessonType      String
  flashcards      Json
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  language        Language       @relation(fields: [languageId], references: [id])
  progressRecords UserProgress[]

  @@index([languageId])
}

model UserProgress {
  id           String   @id @default(uuid())
  userId       String
  lessonId     String
  progress     Float
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  lesson       Lesson   @relation(fields: [lessonId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model CommunityMatch {
  id            String   @id @default(uuid())
  userId        String
  matchedUserId String
  matchReason   String?
  matchedAt     DateTime @default(now())
  matchedUser   User     @relation("CommunityMatchesAsMatched", fields: [matchedUserId], references: [id])
  user          User     @relation("CommunityMatches", fields: [userId], references: [id])
}

model LanguageRetentionForecast {
  id                     String   @id @default(uuid())
  languageId             String   @unique
  retentionCurve         Json
  suggestedReinforcement String?
  createdAt              DateTime @default(now())
  language               Language @relation(fields: [languageId], references: [id])
}

model LanguageInsight {
  id                  String    @id @default(uuid())
  languageId          String    @unique
  learningDifficulty  String
  preservationStatus  String
  availableResources  Json
  activeLearnersCount Int
  nativeSpeakersCount Int
  lastUpdated         DateTime  @default(now())
  nextUpdate          DateTime

  /// back-relation only—no fields/references specified here
  user                User?     @relation(name: "UserNativeInsight")
  language            Language  @relation(fields: [languageId], references: [id])

  @@index([languageId])
}

// … all your other models (WordList, GrammarRule, AudioSample, Lesson, UserProgress, CommunityMatch, LanguageRetentionForecast) remain unchanged …

enum Role {
  LINGUIST
  LEARNER
}